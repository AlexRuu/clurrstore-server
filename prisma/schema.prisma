generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id         String   @id @default(uuid())
  email      String
  address1   String?  @default("")
  address2   String?  @default("")
  city       String?  @default("")
  country    String?  @default("CA")
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  firstName  String
  lastName   String
  phone      String?  @default("")
  postalCode String?  @default("")
  province   String?  @default("")
  role       Role     @default(USER)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  order      Order[]
}

model Category {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[] @relation("ProductToCategory")
}

model Product {
  id          String      @id @default(uuid())
  title       String
  price       Float
  stock       Int
  description String
  categoryId  String
  isFeatured  Boolean
  isArchived  Boolean
  createdAt   DateTime    @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt @db.Timestamptz(6)
  design      Design[]
  detail      Detail[]
  image       Image[]
  category    Category    @relation("ProductToCategory", fields: [categoryId], references: [id])
  style       Style[]
  orderItem   orderItem[]
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Design {
  id        String      @id @default(uuid())
  title     String
  productId String
  stock     Int
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItem orderItem[]
}

model Style {
  id        String      @id @default(uuid())
  title     String
  productId String
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItem orderItem[]
}

model Detail {
  id        String   @id @default(uuid())
  text      String
  productId String?
  Product   Product? @relation(fields: [productId], references: [id])
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String      @unique
  isPaid      Boolean
  profileId   String?
  address     String      @default("")
  phone       String      @default("")
  shipping    Float       @default(0)
  tax         Float       @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  total       Float       @default(0)
  email       String      @default("")
  name        String      @default("")
  profile     Profile?    @relation(fields: [profileId], references: [id])
  orderItem   orderItem[]
}

model orderItem {
  id        String  @id @default(uuid())
  productId String
  designId  String?
  styleId   String?
  quantity  Int
  orderId   String
  design    Design? @relation(fields: [designId], references: [id], onDelete: Cascade)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  style     Style?  @relation(fields: [styleId], references: [id], onDelete: Cascade)
}

model HomeImage {
  id          String   @id @default(uuid())
  title       String
  description String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Newsletter {
  id         String   @id @default(uuid())
  email      String
  subscribed Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}
